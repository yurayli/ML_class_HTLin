SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[i,j] = exp(- 100 * t((x[j,] - x[k,])) %*% (x[j,] - x[k,]) )
}
}
Ks <- c(Ks, sum(K))
}
x[1,] - x[1,]
(x[1,] - x[1,]) %*% (x[1,] - x[1,])
(x[1,] - x[1,]) %*% t(x[1,] - x[1,])
t(x[1,] - x[1,]) %*% (x[1,] - x[1,])
class(x[1,] - x[1,])
t(as.matrix(x[1,] - x[1,])) %*% as.matrix(x[1,] - x[1,])
as.matrix(x[1,] - x[1,]) %*% t(as.matrix(x[1,] - x[1,]))
SVs <- c()
Eout <- c()
Ks <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
pred3 <- predict(model3, x)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[i,j] = exp(- 100 * as.matrix((x[j,] - x[k,])) %*% t(as.matrix(x[j,] - x[k,])) )
}
}
Ks <- c(Ks, sum(K))
}
SVs <- c()
Eout <- c()
Ks <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model3, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[i,j] = exp(- 100 * as.matrix((x[j,] - x[k,])) %*% t(as.matrix(x[j,] - x[k,])) )
}
}
Ks <- c(Ks, sum(K))
}
SVs <- c()
Eout <- c()
Ks <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model3, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[j,k] = exp(- 100 * as.matrix((x[j,] - x[k,])) %*% t(as.matrix(x[j,] - x[k,])) )
}
}
Ks <- c(Ks, sum(K))
}
SVs <- c()
Eout <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model3, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
}
Eout
SVs
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = .001, gamma = 100, cross = 5)
rm(model2)
head(model3$SV)
model3$coefs[1]
model3$coefs[2]
head(model3$coefs, 15)
SVs <- c()
Eout <- c()
Gamma <- c(1, 10, 100, 1000)
for (i in Gamma) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i, cross = 5)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model3, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
}
Eout
sample(100,5)
sample(100,5)
sample(100,5)
sample(100,5)
sample(10,5)
idx <- sample(10,5)
idx
idx <- sample(10,3)
idx
order(idx)
sort(idx)
arr <- 1:10
arr[arr == idx]
arr %in% idx
arr[! arr %in% idx]
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
xtrain <- x[(! 1:nrow(x) %in% valIndex), ]
xtrain <- x[-valIndex, ]
arr[-idx]
rm(y2,y4,y6,y8)
Gamma <- c(1, 10, 100, 1000, 10000)
bestGamms <- c()
for (i in 1:100) {
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
yval <- y[valIndex]
xtrain <- x[-valIndex, ]
ytrain <- y[-valIndex]
Evals <- c()
for (i in Gamma) {
model3 <- svm(x = xtrain, y = ytrain, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i)
pred <- predict(model3, xval)
Eval <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != yval)))
Evals <- c(Evals, Eval)
}
bestGamma <- which[Evals == min(Evals)][1]
bestGamms <- c(bestGamms, bestGamma)
}
bestGamms <- c()
for (i in 1:100) {
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
yval <- y[valIndex]
xtrain <- x[-valIndex, ]
ytrain <- y[-valIndex]
Evals <- c()
for (i in Gamma) {
model3 <- svm(x = xtrain, y = ytrain, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i)
pred <- predict(model3, xval)
Eval <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != yval)))
Evals <- c(Evals, Eval)
}
bestGamma <- Gamma[which(Evals == min(Evals))[1]]
bestGamms <- c(bestGamms, bestGamma)
}
bestGamms <- c()
for (i in 1:100) {
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
yval <- y[valIndex]
xtrain <- x[-valIndex, ]
ytrain <- y[-valIndex]
Evals <- c()
for (i in Gamma) {
model3 <- svm(x = xtrain, y = ytrain, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i)
pred <- predict(model3, xval)
Eval <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != yval)))
Evals <- c(Evals, Eval)
}
bestGamma <- Gamma[which(Evals == min(Evals))[1]]
bestGamms <- c(bestGamms, bestGamma)
}
bestGamms <- c()
for (i in 1:100) {
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
yval <- y[valIndex]
xtrain <- x[-valIndex, ]
ytrain <- y[-valIndex]
Evals <- c()
for (i in Gamma) {
model3 <- svm(x = xtrain, y = ytrain, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i)
pred <- predict(model3, xval)
Eval <- mean(as.numeric(as.numeric(as.character(pred)) != yval))
Evals <- c(Evals, Eval)
}
bestGamma <- Gamma[which(Evals == min(Evals))[1]]
bestGamms <- c(bestGamms, bestGamma)
}
rm(Ks)
length(which(bestGamms == 10))
rm(list = ls())
X <- matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0), 7,2)
y = c(-1,-1,-1,1,1,1,1)
model <- svm(x = X, y = y, scale = F, kernel = 'linear', type = 'C-classification', cost = 1e9)
model <- svm(x = X, y = y, scale = F, kernel = 'linear', type = 'C-classification', cost = 1e6)
model <- svm(x = X, y = y, scale = F, kernel = 'linear', type = 'C-classification', cost = 1e7)
model <- svm(x = X, y = y, scale = F, kernel = 'linear', type = 'C-classification', cost = 1e6)
model
w <- t(model$coefs) %*% model$SV
b <- -model$rho
model <- svm(x = X, y = y, scale = F, kernel = 'polynomial', type = 'C-classification',
cost = 1e6, coef0 = 1, ddegree = 2)
model <- svm(x = X, y = y, scale = F, kernel = 'polynomial', type = 'C-classification',
cost = 1e8, coef0 = 1, ddegree = 2)
w <- t(model$coefs) %*% model$SV
b <- -model$rho
nrow(model$coefs)
ncol(model$coefs)
nrow(model$SV)
ncol(model$SV)
model
model$coefs * y
model$coefs * y[model$index]
model$coefs
model$index
w <- -w
b <- -b
sum(model$coefs * y[model$index])
w
b
15/9
model$coefs
model$SV
SV <- model$SV
x = 1:10
x = 1:.1:10
x = 1:.1:10
x = 1:.1
?seq
seq(1, 5, 0.1)
x = seq(0,1,0.1)
x
x = seq(-6,6,0.1)
library(pracma)
y = sigmoid(x)
plot(x, y, type = 'p')
plot(x, y, type = 'l')
plot(x, y, type = 'l', col = 'green')
plot(x, y, type = 'l', col = 'blue')
plot(x, y, type = 'l', col = 'blue', cex = 2)
plot(x, y, type = 'l', col = 'blue', cex = 5)
plot(x, y, type = 'l', col = 'blue', lwd = 4)
plot(x, y, type = 'l', col = 'blue', lwd = 3)
plot(x, y, type = 'l', col = 'blue', lwd = 3, ylim = c(0,1))
plot(x, y, type = 'l', col = 'blue', lwd = 3, xlim = c(-4,4), ylim = c(0,1))
plot(x, y, type = 'l', col = 'blue', lwd = 3, xlim = c(-6,6), ylim = c(0,1))
180 + 18^2 + 18
x = -6:6
plot(x, 1/(1+exp(-x)),'p')
x = -10:10
plot(x, 1/(1+exp(-x)),'l')
x = 1e9
for (i in 1e6) {
x = x + 1e-6
}
x = x- 1e9
x
X = 1:9
x
X
?as.array
X = as.array(X, dim = c(3,3))
X
X = as.matrix(X, c(3,3))
X
as.matrix()
?as.matrix
X = as.matrix(X, 3,3)
X
X = 1:9
X
X = as.matrix(X, 3,3)
X
X = 1:9
X = matrix(X, 3,3)
X
X[1,]
X[,2]
X[3,2]
X[3]
X[4]
X[7]
X[3][1]
X[3][2]
X[3,2]
library(randomForests)
library(randomForest)
install.packages("randomForest")
install.packages('tree')
1:1
getwd()
setwd('./Desktop/ML class NTU/hw7/')
train <- read.table("hw7_train.dat")
head(train)
library(rpart)
clf <- rpart(V3 ~ ., data = train)
plot(clf); text(clf)
pred <- predict(clf, train[,-3])
pred[pred >= 0] <- 1; pred[pred < 0] <- -1
Ein <- 1 - mean(as.numeric(pred == train[,3])) # Ein = 0.07
test <- read.table("hw7_test.dat")
pred <- predict(clf, test[,-3])
pred[pred >= 0] <- 1; pred[pred < 0] <- -1
Eout <- 1 - mean(as.numeric(pred == test[,3])) # Eout = 0.135
library(randomForest)
rfNews()
?randomForest
source('MLHW7_1.R')
proc.time()
proc.time()-ptm
rm(list = ls())
# Import data
train <- read.table("hw7_train.dat")
test <- read.table("hw7_test.dat")
source('./DTree.R')
ptm <- proc.time()
N <- nrow(train)
Ein_gt <- 0
#for (numOfTime in 1:1) {
Grf_in <- 0
Grf_out <- 0
for (t in 1:300) {
seed <- sample(N, N, replace = T)
trainDat <- train[seed, ]
gt <- DTree(trainDat)  # each tree gt
# evaluate train set from each tree
ypred <- c()
g_eval <- gt
for (i in 1:N) {
x = as.vector(as.matrix(train[i,1:2]))
repeat { # evaluate the label of each input example
if (length(g_eval[[1]]) == 1) {
label <- g_eval[[1]]
break
} else {
if (x[g_eval[[1]][1]] < g_eval[[1]][2]) {
g_eval <- g_eval[[2]]  # one subtree
} else {
g_eval <- g_eval[[3]]  # the other subtree
}
}
}
ypred <- c(ypred,label)
g_eval <- gt
}
Ein_gt <- Ein_gt + ( 1 - mean(as.numeric(ypred == train[,3])) )  # sum of Ein of each gt in each round
Grf_in <- Grf_in + ypred  # sum of each voting from each tree
# evaluate test set from each tree
ypred <- c()
g_eval <- gt
for (i in 1:nrow(test)) {
x = as.vector(as.matrix(test[i,1:2]))
repeat {
if (length(g_eval[[1]]) == 1) {
label <- g_eval[[1]]
break
} else {
if (x[g_eval[[1]][1]] < g_eval[[1]][2]) {
g_eval <- g_eval[[2]]
} else {
g_eval <- g_eval[[3]]
}
}
}
ypred <- c(ypred,label)
g_eval = gt
}
Grf_out <- Grf_out + ypred  # sum of each voting from each tree
}
# evaluate train set from G_rf
Grf_in <- sign(Grf_in)
Ein <- ( 1 - mean(as.numeric(Grf_in == train[,3])) )  # sum of Ein of each forest in each round
# Ein = 0 for one try
# evaluate test set from G_rf
Grf_out <- sign(Grf_out)
Eout <- ( 1 - mean(as.numeric(Grf_out == test[,3])) )  # sum of Eout of each forest in each round
# Eout = .073 for one try
#proc.time() - ptm
#}
Ein_gt <- Ein_gt / 300  # average of 300 trees Ein_gt: .0512 for one try
proc.time() - ptm
library(randomForest)
ptm <- proc.time()
set.seed(42)
clf <- randomForest(V3 ~ ., data = train, ntree=300)
print(clf)
pred_train <- predict(clf, train[,-3])
pred_test <- predict(clf, train[,-3])
proc.time() - ptm
pred_train[pred_train >= 0] <- 1; pred_train[pred_train < 0] <- -1
Ein <- 1 - mean(as.numeric(pred_train == train[,3])) # Ein = 0.07
pred_test[pred_test >= 0] <- 1; pred_test[pred_test < 0] <- -1
Ein <- 1 - mean(as.numeric(pred_test == train[,3])) # Eout = 0.07
Ein <- 1 - mean(as.numeric(pred_train == train[,3])) # Ein = 0.07
Eout <- 1 - mean(as.numeric(pred_test == train[,3])) # Eout = 0.07
Ein
Eout
ptm <- proc.time()
set.seed(42)
clf <- randomForest(V3 ~ ., data = train, ntree=300)
print(clf)
pred_train <- predict(clf, train[,-3])
pred_train[pred_train >= 0] <- 1; pred_train[pred_train < 0] <- -1
Ein <- 1 - mean(as.numeric(pred_train == train[,3])) # Ein = 0.07
pred_test <- predict(clf, train[,-3])
pred_test[pred_test >= 0] <- 1; pred_test[pred_test < 0] <- -1
Eout <- 1 - mean(as.numeric(pred_test == train[,3])) # Eout = 0.07
proc.time() - ptm  # > .053 sec
Ein
Eout
head(train[,3])
head(train[,3],15)
head(pred_train,15)
head(test[,3],15)
head(pred_test,15)
ptm <- proc.time()
set.seed(42)
clf <- randomForest(V3 ~ ., data = train, ntree=300)
print(clf)
pred_train <- predict(clf, train[,-3])
pred_train[pred_train >= 0] <- 1; pred_train[pred_train < 0] <- -1
Ein <- 1 - mean(as.numeric(pred_train == train[,3])) # Ein = 0.07
pred_test <- predict(clf, train[,-3])
pred_test[pred_test >= 0] <- 1; pred_test[pred_test < 0] <- -1
Eout <- 1 - mean(as.numeric(pred_test == train[,3])) # Eout = 0.07
proc.time() - ptm  # > .053 sec
Ein
Eout
ptm <- proc.time()
set.seed(42)
clf <- randomForest(V3 ~ ., data = train, ntree=300)
print(clf)
pred_train <- predict(clf, train[,-3])
pred_train[pred_train >= 0] <- 1; pred_train[pred_train < 0] <- -1
Ein <- 1 - mean(as.numeric(pred_train == train[,3])) # Ein = 0.07
pred_test <- predict(clf, test)
pred_test[pred_test >= 0] <- 1; pred_test[pred_test < 0] <- -1
Eout <- 1 - mean(as.numeric(pred_test == test[,3])) # Eout = 0.07
proc.time() - ptm
Ein
Eout
ptm <- proc.time()
set.seed(42)
clf <- randomForest(V3 ~ ., data = train, ntree=300)
print(clf)
pred_train <- predict(clf, train[,-3])
pred_train[pred_train >= 0] <- 1; pred_train[pred_train < 0] <- -1
Ein <- 1 - mean(as.numeric(pred_train == train[,3])) # Ein = 0
pred_test <- predict(clf, test)
pred_test[pred_test >= 0] <- 1; pred_test[pred_test < 0] <- -1
Eout <- 1 - mean(as.numeric(pred_test == test[,3])) # Eout = 0.073
proc.time() - ptm
Ein
Eout
ptm <- proc.time()
set.seed(420)
clf <- randomForest(V3 ~ ., data = train, ntree=300)
print(clf)
pred_train <- predict(clf, train[,-3])
pred_train[pred_train >= 0] <- 1; pred_train[pred_train < 0] <- -1
Ein <- 1 - mean(as.numeric(pred_train == train[,3])) # Ein = 0
pred_test <- predict(clf, test)
pred_test[pred_test >= 0] <- 1; pred_test[pred_test < 0] <- -1
Eout <- 1 - mean(as.numeric(pred_test == test[,3])) # Eout = 0.073
proc.time() - ptm
Ein
Eout
ptm <- proc.time()
set.seed(42)
clf <- randomForest(V3 ~ ., data = train, ntree=300)
print(clf)
pred_train <- predict(clf, train[,-3])
pred_train[pred_train >= 0] <- 1; pred_train[pred_train < 0] <- -1
Ein <- 1 - mean(as.numeric(pred_train == train[,3])) # Ein = 0
pred_test <- predict(clf, test)
pred_test[pred_test >= 0] <- 1; pred_test[pred_test < 0] <- -1
Eout <- 1 - mean(as.numeric(pred_test == test[,3])) # Eout = 0.073
proc.time() - ptm
Ein
Eout
rm(list = ls())
train <- read.table("hw7_train.dat")
test <- read.table("hw7_test.dat")
library(randomForest)
ptm <- proc.time()
set.seed(420)
Ein <- 0
Eout <- 0
for (numOfTime in 1:100) {
clf <- randomForest(V3 ~ ., data = train, ntree=300)
pred <- predict(clf, train[,-3])
pred[pred >= 0] <- 1; pred[pred < 0] <- -1
Ein <- Ein + (1 - mean(as.numeric(pred == train[,3])))
pred <- predict(clf, test)
pred[pred >= 0] <- 1; pred[pred < 0] <- -1
Eout <- Eout + (1 - mean(as.numeric(pred == test[,3])))
}
Ein <- Ein / 100  # avg Ein =
Eout <- Eout / 100  # avg Eout =
proc.time() - ptm
Ein
Eout
rm(list = ls())
