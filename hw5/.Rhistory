Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[i,j] = exp(- 100 * (x[j,] - x[k,]) %*% (x[j,] - x[k,]) )
}
}
Ks <- c(Ks, sum(K))
}
SVs <- c()
Eout <- c()
Ks <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
pred3 <- predict(model3, x)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[i,j] = exp(- 100 * (x[j,] - x[k,]) %*% (x[j,] - x[k,]) )
}
}
Ks <- c(Ks, sum(K))
}
SVs <- c()
Eout <- c()
Ks <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
pred3 <- predict(model3, x)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[i,j] = exp(- 100 * t((x[j,] - x[k,])) %*% (x[j,] - x[k,]) )
}
}
Ks <- c(Ks, sum(K))
}
x[1,] - x[1,]
(x[1,] - x[1,]) %*% (x[1,] - x[1,])
(x[1,] - x[1,]) %*% t(x[1,] - x[1,])
t(x[1,] - x[1,]) %*% (x[1,] - x[1,])
class(x[1,] - x[1,])
t(as.matrix(x[1,] - x[1,])) %*% as.matrix(x[1,] - x[1,])
as.matrix(x[1,] - x[1,]) %*% t(as.matrix(x[1,] - x[1,]))
SVs <- c()
Eout <- c()
Ks <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
pred3 <- predict(model3, x)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[i,j] = exp(- 100 * as.matrix((x[j,] - x[k,])) %*% t(as.matrix(x[j,] - x[k,])) )
}
}
Ks <- c(Ks, sum(K))
}
SVs <- c()
Eout <- c()
Ks <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model3, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[i,j] = exp(- 100 * as.matrix((x[j,] - x[k,])) %*% t(as.matrix(x[j,] - x[k,])) )
}
}
Ks <- c(Ks, sum(K))
}
SVs <- c()
Eout <- c()
Ks <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model3, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
K = matrix(rep(0, nrow(x)), nrow(x), nrow(x))
for (j in 1:nrow(x)) {
for (k in 1:nrow(x)) {
K[j,k] = exp(- 100 * as.matrix((x[j,] - x[k,])) %*% t(as.matrix(x[j,] - x[k,])) )
}
}
Ks <- c(Ks, sum(K))
}
SVs <- c()
Eout <- c()
C <- c(.001, .01, .1, 1, 10)
for (i in C) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = i, gamma = 100, cross = 5)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model3, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
}
Eout
SVs
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = .001, gamma = 100, cross = 5)
rm(model2)
head(model3$SV)
model3$coefs[1]
model3$coefs[2]
head(model3$coefs, 15)
SVs <- c()
Eout <- c()
Gamma <- c(1, 10, 100, 1000)
for (i in Gamma) {
model3 <- svm(x = x, y = y, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i, cross = 5)
SVs <- c(SVs, nrow(model3$SV))
pred <- predict(model3, xtest)
Eout <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != ytest)))
}
Eout
sample(100,5)
sample(100,5)
sample(100,5)
sample(100,5)
sample(10,5)
idx <- sample(10,5)
idx
idx <- sample(10,3)
idx
order(idx)
sort(idx)
arr <- 1:10
arr[arr == idx]
arr %in% idx
arr[! arr %in% idx]
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
xtrain <- x[(! 1:nrow(x) %in% valIndex), ]
xtrain <- x[-valIndex, ]
arr[-idx]
rm(y2,y4,y6,y8)
Gamma <- c(1, 10, 100, 1000, 10000)
bestGamms <- c()
for (i in 1:100) {
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
yval <- y[valIndex]
xtrain <- x[-valIndex, ]
ytrain <- y[-valIndex]
Evals <- c()
for (i in Gamma) {
model3 <- svm(x = xtrain, y = ytrain, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i)
pred <- predict(model3, xval)
Eval <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != yval)))
Evals <- c(Evals, Eval)
}
bestGamma <- which[Evals == min(Evals)][1]
bestGamms <- c(bestGamms, bestGamma)
}
bestGamms <- c()
for (i in 1:100) {
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
yval <- y[valIndex]
xtrain <- x[-valIndex, ]
ytrain <- y[-valIndex]
Evals <- c()
for (i in Gamma) {
model3 <- svm(x = xtrain, y = ytrain, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i)
pred <- predict(model3, xval)
Eval <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != yval)))
Evals <- c(Evals, Eval)
}
bestGamma <- Gamma[which(Evals == min(Evals))[1]]
bestGamms <- c(bestGamms, bestGamma)
}
bestGamms <- c()
for (i in 1:100) {
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
yval <- y[valIndex]
xtrain <- x[-valIndex, ]
ytrain <- y[-valIndex]
Evals <- c()
for (i in Gamma) {
model3 <- svm(x = xtrain, y = ytrain, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i)
pred <- predict(model3, xval)
Eval <- c(Eout, mean(as.numeric(as.numeric(as.character(pred)) != yval)))
Evals <- c(Evals, Eval)
}
bestGamma <- Gamma[which(Evals == min(Evals))[1]]
bestGamms <- c(bestGamms, bestGamma)
}
bestGamms <- c()
for (i in 1:100) {
valIndex <- sample(nrow(x), 1000)
xval <- x[valIndex, ]
yval <- y[valIndex]
xtrain <- x[-valIndex, ]
ytrain <- y[-valIndex]
Evals <- c()
for (i in Gamma) {
model3 <- svm(x = xtrain, y = ytrain, type = 'C-classification', kernel = 'radial',
scale = F, cost = 0.1, gamma = i)
pred <- predict(model3, xval)
Eval <- mean(as.numeric(as.numeric(as.character(pred)) != yval))
Evals <- c(Evals, Eval)
}
bestGamma <- Gamma[which(Evals == min(Evals))[1]]
bestGamms <- c(bestGamms, bestGamma)
}
rm(Ks)
length(which(bestGamms == 10))
rm(list = ls())
X <- matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0), 7,2)
y = c(-1,-1,-1,1,1,1,1)
model <- svm(x = X, y = y, scale = F, kernel = 'linear', type = 'C-classification', cost = 1e9)
model <- svm(x = X, y = y, scale = F, kernel = 'linear', type = 'C-classification', cost = 1e6)
model <- svm(x = X, y = y, scale = F, kernel = 'linear', type = 'C-classification', cost = 1e7)
model <- svm(x = X, y = y, scale = F, kernel = 'linear', type = 'C-classification', cost = 1e6)
model
w <- t(model$coefs) %*% model$SV
b <- -model$rho
model <- svm(x = X, y = y, scale = F, kernel = 'polynomial', type = 'C-classification',
cost = 1e6, coef0 = 1, ddegree = 2)
model <- svm(x = X, y = y, scale = F, kernel = 'polynomial', type = 'C-classification',
cost = 1e8, coef0 = 1, ddegree = 2)
w <- t(model$coefs) %*% model$SV
b <- -model$rho
nrow(model$coefs)
ncol(model$coefs)
nrow(model$SV)
ncol(model$SV)
model
model$coefs * y
model$coefs * y[model$index]
model$coefs
model$index
w <- -w
b <- -b
sum(model$coefs * y[model$index])
w
b
15/9
model$coefs
model$SV
SV <- model$SV
x = 1:10
x = 1:.1:10
x = 1:.1:10
x = 1:.1
?seq
seq(1, 5, 0.1)
x = seq(0,1,0.1)
x
x = seq(-6,6,0.1)
library(pracma)
y = sigmoid(x)
plot(x, y, type = 'p')
plot(x, y, type = 'l')
plot(x, y, type = 'l', col = 'green')
plot(x, y, type = 'l', col = 'blue')
plot(x, y, type = 'l', col = 'blue', cex = 2)
plot(x, y, type = 'l', col = 'blue', cex = 5)
plot(x, y, type = 'l', col = 'blue', lwd = 4)
plot(x, y, type = 'l', col = 'blue', lwd = 3)
plot(x, y, type = 'l', col = 'blue', lwd = 3, ylim = c(0,1))
plot(x, y, type = 'l', col = 'blue', lwd = 3, xlim = c(-4,4), ylim = c(0,1))
plot(x, y, type = 'l', col = 'blue', lwd = 3, xlim = c(-6,6), ylim = c(0,1))
180 + 18^2 + 18
x = -6:6
plot(x, 1/(1+exp(-x)),'p')
x = -10:10
plot(x, 1/(1+exp(-x)),'l')
x = 1e9
for (i in 1e6) {
x = x + 1e-6
}
x = x- 1e9
x
X = 1:9
x
X
?as.array
X = as.array(X, dim = c(3,3))
X
X = as.matrix(X, c(3,3))
X
as.matrix()
?as.matrix
X = as.matrix(X, 3,3)
X
X = 1:9
X
X = as.matrix(X, 3,3)
X
X = 1:9
X = matrix(X, 3,3)
X
X[1,]
X[,2]
X[3,2]
X[3]
X[4]
X[7]
X[3][1]
X[3][2]
X[3,2]
getwd()
setwd(dir = './Desktop/ML class NTU/hw5/')
train <- read.table("./hw5_train.dat")
head(train)
test <- read.table("./hw5_test.dat")
library(e1071)
?svm
data("iris")
head(iris)
x <- subset(iris, select = -Species)
y <- iris$Species
str(y)
model <- svm(x, y)
pred <- predict(model, x)
table(pred, y)
plot(model, iris, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = terrain.colors)
plot(model, iris, Petal.Width ~ Petal.Length)
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = terrain.colors)
TRUE
True
T
if (T) {
print('Hello world!')
}
if (F) {
print('Hello world!')
}
x <- train
y <- rep(0, nrow(x)); y[x[,1] == 0] <- 1; y <- y*2 - 1         #labels of "0", "not 0"
x <- x[,2:3]
case <- 1
model <- svm(x = x, y = y, type = 'C-classification', kernel = 'linear',
scale = F, cost = 0.01, cross = 5)
str(model)
class(model)
typeof(model)
class(c(1,2,3,4))
typeof(c(1,2,3,4))
typeof(list(1,2,3,4))
class(list(1,2,3,4))
head(model$SV)
x[1:2,]
x[c(1,2,18,39,45,70),]
pred <- predict(model, x)
head(pred)
head(as.character(pred))
head(as.numeric(pred))
?princomp
?prcomp
sum(model$coefs)
head(model$coefs)
length(model$coefs)
str(model$coefs)
summary(model$coefs)
tail(model$coefs)
pred <- predict(model, x)
accu <- mean(as.numeric(as.numeric(as.character(pred)) == y))  # accu of train set
Ein <- mean(as.numeric(as.numeric(as.character(pred)) != y))
# how to extract model params
# alpha, w, b, corresponding support vectors (alpha>0)
SV <- model$SV  # resulting support vectors
alpha_y <- model$coefs  # corresponding coefficients times the training labels
b <- -model$rho  # negative intercept
w <- t(alpha_y) %*% SV
if (y[1] == -1) {
w <- -w
b <- -b
}
abs(c(3,4))
(c(3,4))^2
sum((c(3,4))^2)
sqrt(sum(w^2))
2 in c(2,3,4)
lis = list(1,2,3,4)
lis[1]
lis[2]
lis[[2]]
c(c(1,2),c('a','b'))
source('MLHW5.R')
source('MLHW5.R')
rm(list = ls())
source('MLHW5.R')
1 - minEin
source('MLHW5.R')
length(SV)
length(alpha_y)
model <- svm(x = x, y = labels[[i]], type = 'C-classification', kernel = 'polynomial',
scale = F, cost = 0.01, coef0 = 1, degree = 2, cross = 5)
labels <- list(y,y2,y4,y6,y8)
i = 1
model <- svm(x = x, y = labels[[i]], type = 'C-classification', kernel = 'polynomial',
scale = F, cost = 0.01, coef0 = 1, degree = 2, cross = 5)
alpha_y <- model$coefs
sum_alpha <- sum(alpha_y * labels[[i]])
length(model$index)
length(model$SV)
length(model$coef0)
length(model$coefs)
sum_alpha <- sum(alpha_y * labels[[i]][index])
sum_alpha <- sum(alpha_y * labels[[i]][model$index])
sum_alpha
source('MLHW5.R')
labelIdx
source('MLHW5.R')
labelIdx
maxSum
source('MLHW5.R')
maxSum
source('MLHW5.R')
maxSum
source('MLHW5.R')
maxSum
source('MLHW5.R')
head(y)
head(y,100)
head(alpha_y)
head(alpha_y,100)
tail(alpha_y,100)
head(SV)
dim(SV)
length(SV)
head(alpha_y)
head(y)
head(SV)
tail(alpha_y)
tail(y)
length(which(y == 1))
length(which(y == -1))
head(y[model$index])
tail(y[model$index])
y[model$index][1]
source('MLHW5.R')
maxSum
source('MLHW5.R')
source('MLHW5.R')
source('MLHW5.R')
labels[labels == y]
source('MLHW5.R')
maxSum
maxSum
source('MLHW5.R')
labelIdx
maxSum
minEin
source('MLHW5.R')
head(y[model$index])
sign(-3)
sign(3)
sign(3.)
sign(-3.)
sign(-.3)
pred_cal <- sign(w %*% x + b)
class(x)
?svm
x = as.matrix(x)
pred_cal <- sign(w %*% x + b)
dim(w)
dim(x)
dim(b)
pred_cal <- sign(x %*% t(w) + b)
head(pred)
head(y)
head(pred_cal)
pred_cal <- sign(x %*% t(w) - b)
head(pred_cal)
source('MLHW5.R')
idx
gammaIdx
minEout
print('Hello', 3)
print('Hello' 3)
print('Hello', '3')
?print
?cat
sprintf('hello world')
cat('hello world')
cat('hello world', 3, 'numbers')
a = 1:6
which(a == max(a))
source('MLHW5.R')
rm(list = ls())
